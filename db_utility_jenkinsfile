#!/usr/bin/env groovy
// Liquibase declarative pipeline
//
//
pipeline {
agent any
  environment {
    GITURL="${params.REPO_URL}"
    BRANCH="${params.BRANCH}"
    PROJECT="${params.PROJECT}"
    ENVIRONMENT_STEP="${params.ENVIRONMENT}"
    LIQUIBASE_CLASSPATH="${params.CLASSPATH}"
    PATH="/opt/liquibase/liquibase-4.8.0:${PATH}"
    LIQUIBASE_DEFAULTS_FILE="${BRANCH}.liquibase.properties"
    LIQUIBASE_COMMAND_CHANGELOG_FILE="${params.CHANGELOGFILE}"
    LIQUIBASE_PRO_LICENSE_KEY="ABwwGgQUp6l3D3Do5GgK++KmJf+TpB4zu+kCAgQAg/s1gXqweWYIKrByfYsW8SsFG763I64VUtyMWNsLGyF+ptrzpsqFhG3pmqgEUeuGfXvW2S4BwGrd1xy/Tj3dWqXJ6h9DHUdmCcdafXkLNYqMr/X0QCviBMaa8ul2kq1gWQV6zKKdeLb2DaePtjhOutnMJzxV9+0MCivTXHhMzTJJu0OvuOr4ofkBn1b3Tv3awZ3/PjmAaGdYt0JEbqLN04ztqch/vL3BkXcrVQuc3ThEq2FMTgapjI7IpoeCP//64dR4rrYrqwMiBDrl71yBrBE11b2s73oybpCDYkW1CYAeX1DcvC/+Gt040tUO27Z0iVuZxJiKek6drCp3j59kYyLKNEg5KI2ZIm71B7gL8BgRsO+7NJhRerva7LbMzYLIMgPn1En4xkeoHKbQipsh2yf43/kVazmSqYSiFl8gMj3+G4Tp71m9wxr3EvO98CwsYcrAPLyEGZm/lZ3q/RGFCatmj3Nn/Kh0+yk5CPV30bdJjGPtiC0UJbIcqlQY5cbibqEEFRV2zWnItktjWeKBAEX09rJadTLRhFrmZAkooina8l9HHR05i1ee9E5z57a/jwKjpTLbAi/QzFCqkRizbwwSKnjLatO3/VmjIegopManUuwoDHfc6PCepVVYCsYiofwDqQ3jwYBg5gtVEcmFsikxA3QgGxEI6Z/bzeUFFLg="
    LB_COMMAND="${params.LB_COMMAND}"
    BASEDIR="${params.BASEDIR}"
  }
  stages {

    stage ('Precheck') {
      steps {
        sh '''
          { set +x; } 2>/dev/null
          echo "Git repository: "${GITURL}
          echo "Branch: "${BRANCH}
          echo "Project: "${PROJECT}
          echo "LIQUIBASE_CLASSPATH: "${LIQUIBASE_CLASSPATH}
          echo "Path: "${PATH}
          echo "LIQUIBASE_PRO_LICENSE_KEY: "${LIQUIBASE_PRO_LICENSE_KEY}
          echo "LIQUIBASE_DEFAULTS_FILE: "${LIQUIBASE_DEFAULTS_FILE}
          echo "BASEDIR: "${BASEDIR}
          echo "LIQUIBASE_COMMAND_CHANGELOG_FILE: "${LIQUIBASE_COMMAND_CHANGELOG_FILE}
        '''
      } // steps
  	} // stage 'precheck'

    stage ('Checkout') {
      steps {
        // checkout Liquibase project from repo
        cleanWs()
        sh '''
          { set +x; } 2>/dev/null
          echo "git clone ${GITURL}/${PROJECT}.git"
          git clone ${GITURL}/${PROJECT}.git
          cd ${PROJECT}
          git checkout $BRANCH
          git status
          '''
      } // steps for checkout stages
    } // stage 'checkout'

    stage ('Liquibase Status'){
      steps {
            sh '''
            { set +x; } 2>/dev/null
            echo "cd ${PROJECT}/${BASEDIR}"
            cd ${PROJECT}/${BASEDIR}
            echo "Using properties file: "${LIQUIBASE_DEFAULTS_FILE}
            liquibase status --verbose
            '''
      } // steps
    }   // Environment stage

    stage ('Liquibase Command'){
      steps {
            sh '''
            { set +x; } 2>/dev/null
            echo "cd ${PROJECT}/${BASEDIR}"
            cd ${PROJECT}/${BASEDIR}
            echo "Using properties file: "${LIQUIBASE_DEFAULTS_FILE}
            if [ -z "${LB_COMMAND}" ]
            then
                echo "(no LB_COMMAND was provided) Running command: liquibase status --verbose"
                liquibase status --verbose
            else
                echo "Running command: liquibase "${LBCOMMAND}
                liquibase ${LB_COMMAND}
            fi
            '''
      } // steps
    }   // Environment stage

    stage ('Liquibase History'){
      steps {
            sh '''
            { set +x; } 2>/dev/null
            echo "cd ${PROJECT}/${BASEDIR}"
            cd ${PROJECT}/${BASEDIR}
            echo "Using properties file: "${LIQUIBASE_DEFAULTS_FILE}
            liquibase history
            '''
      } // steps
    }   // Environment stage

  } // stages
}  // pipeline
